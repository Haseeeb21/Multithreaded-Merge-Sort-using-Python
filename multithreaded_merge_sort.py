# -*- coding: utf-8 -*-
"""Multithreaded_Merge_Sort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pbleg6R91iuRa2O_BopCCy7TYu4S6yJ1
"""

import threading  #Thread Library
import time   #Time Library


def mergesort(arr):   #Merge Sort Function

  if len(arr) == 1:
    return (arr)
  
  else:
    mid = len(arr)//2   #Calculating Mid
    
    left = arr[:mid]    #Left of mid = left
    right = arr[mid:]   #Right of mid = right
    
    mergesort(left)     #Recursively calling on left
    mergesort(right)    #and right

    i = j = k = 0   #Initializing

    while i < len(left) and j < len(right):
      if left[i] < right[j]:
        arr[k] = left[i]
        i += 1
      else:
        arr[k] = right[j]
        j += 1
      k += 1

    while i < len(left):
      arr[k] = left[i]
      i += 1
      k += 1
    while j < len(right):
      arr[k] = right[j]
      j += 1
      k += 1

                          #Array size
n = int(input("Enter Number of elements in List/Array: "))

ls = []   #Empty List/Array

for i in range(n):
  a = int(input("Enter Number: "))
  ls.append(a)                #Appending in List

print("Given Array:", ls)

    #Making 4 Threads because of 4 Cores

t1 = threading.Thread(target = mergesort, args=(ls,)) #1st Thread
t2 = threading.Thread(target = mergesort, args=(ls,)) #2nd Thread
t3 = threading.Thread(target = mergesort, args=(ls,)) #3rd Thread
t4 = threading.Thread(target = mergesort, args=(ls,)) #4th Thread

mergesort(ls)     #Calling mergesort func

             #Starting Threads
t1.start()          #1st
time.sleep(1.0)
t2.start()          #2nd
time.sleep(2.0)
t3.start()          #3rd
time.sleep(2.0)
t4.start()          #4th


              #Joining Threads
t1.join()
t2.join()
t3.join()
t4.join()

print("Sorted Array (by Merge Sort):", ls)    #Sorted Array by Merge Sort